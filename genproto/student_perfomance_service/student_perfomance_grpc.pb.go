// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: student_perfomance.proto

package student_perfomance_service

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StudentPerfomanceServiceClient is the client API for StudentPerfomanceService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StudentPerfomanceServiceClient interface {
	Create(ctx context.Context, in *CreateStudentPerfomance, opts ...grpc.CallOption) (*GetStudentPerfomance, error)
	GetByID(ctx context.Context, in *StudentPerfomancePrimaryKey, opts ...grpc.CallOption) (*GetStudentPerfomance, error)
	GetList(ctx context.Context, in *GetListStudentPerfomanceRequest, opts ...grpc.CallOption) (*GetListStudentPerfomanceResponse, error)
	Update(ctx context.Context, in *UpdateStudentPerfomance, opts ...grpc.CallOption) (*GetStudentPerfomance, error)
	Delete(ctx context.Context, in *StudentPerfomancePrimaryKey, opts ...grpc.CallOption) (*empty.Empty, error)
}

type studentPerfomanceServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStudentPerfomanceServiceClient(cc grpc.ClientConnInterface) StudentPerfomanceServiceClient {
	return &studentPerfomanceServiceClient{cc}
}

func (c *studentPerfomanceServiceClient) Create(ctx context.Context, in *CreateStudentPerfomance, opts ...grpc.CallOption) (*GetStudentPerfomance, error) {
	out := new(GetStudentPerfomance)
	err := c.cc.Invoke(ctx, "/student_perfomance_service_go.StudentPerfomanceService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentPerfomanceServiceClient) GetByID(ctx context.Context, in *StudentPerfomancePrimaryKey, opts ...grpc.CallOption) (*GetStudentPerfomance, error) {
	out := new(GetStudentPerfomance)
	err := c.cc.Invoke(ctx, "/student_perfomance_service_go.StudentPerfomanceService/GetByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentPerfomanceServiceClient) GetList(ctx context.Context, in *GetListStudentPerfomanceRequest, opts ...grpc.CallOption) (*GetListStudentPerfomanceResponse, error) {
	out := new(GetListStudentPerfomanceResponse)
	err := c.cc.Invoke(ctx, "/student_perfomance_service_go.StudentPerfomanceService/GetList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentPerfomanceServiceClient) Update(ctx context.Context, in *UpdateStudentPerfomance, opts ...grpc.CallOption) (*GetStudentPerfomance, error) {
	out := new(GetStudentPerfomance)
	err := c.cc.Invoke(ctx, "/student_perfomance_service_go.StudentPerfomanceService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *studentPerfomanceServiceClient) Delete(ctx context.Context, in *StudentPerfomancePrimaryKey, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/student_perfomance_service_go.StudentPerfomanceService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StudentPerfomanceServiceServer is the server API for StudentPerfomanceService service.
// All implementations should embed UnimplementedStudentPerfomanceServiceServer
// for forward compatibility
type StudentPerfomanceServiceServer interface {
	Create(context.Context, *CreateStudentPerfomance) (*GetStudentPerfomance, error)
	GetByID(context.Context, *StudentPerfomancePrimaryKey) (*GetStudentPerfomance, error)
	GetList(context.Context, *GetListStudentPerfomanceRequest) (*GetListStudentPerfomanceResponse, error)
	Update(context.Context, *UpdateStudentPerfomance) (*GetStudentPerfomance, error)
	Delete(context.Context, *StudentPerfomancePrimaryKey) (*empty.Empty, error)
}

// UnimplementedStudentPerfomanceServiceServer should be embedded to have forward compatible implementations.
type UnimplementedStudentPerfomanceServiceServer struct {
}

func (UnimplementedStudentPerfomanceServiceServer) Create(context.Context, *CreateStudentPerfomance) (*GetStudentPerfomance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedStudentPerfomanceServiceServer) GetByID(context.Context, *StudentPerfomancePrimaryKey) (*GetStudentPerfomance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByID not implemented")
}
func (UnimplementedStudentPerfomanceServiceServer) GetList(context.Context, *GetListStudentPerfomanceRequest) (*GetListStudentPerfomanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (UnimplementedStudentPerfomanceServiceServer) Update(context.Context, *UpdateStudentPerfomance) (*GetStudentPerfomance, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedStudentPerfomanceServiceServer) Delete(context.Context, *StudentPerfomancePrimaryKey) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

// UnsafeStudentPerfomanceServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StudentPerfomanceServiceServer will
// result in compilation errors.
type UnsafeStudentPerfomanceServiceServer interface {
	mustEmbedUnimplementedStudentPerfomanceServiceServer()
}

func RegisterStudentPerfomanceServiceServer(s grpc.ServiceRegistrar, srv StudentPerfomanceServiceServer) {
	s.RegisterService(&StudentPerfomanceService_ServiceDesc, srv)
}

func _StudentPerfomanceService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStudentPerfomance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentPerfomanceServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/student_perfomance_service_go.StudentPerfomanceService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentPerfomanceServiceServer).Create(ctx, req.(*CreateStudentPerfomance))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudentPerfomanceService_GetByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StudentPerfomancePrimaryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentPerfomanceServiceServer).GetByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/student_perfomance_service_go.StudentPerfomanceService/GetByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentPerfomanceServiceServer).GetByID(ctx, req.(*StudentPerfomancePrimaryKey))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudentPerfomanceService_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListStudentPerfomanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentPerfomanceServiceServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/student_perfomance_service_go.StudentPerfomanceService/GetList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentPerfomanceServiceServer).GetList(ctx, req.(*GetListStudentPerfomanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudentPerfomanceService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStudentPerfomance)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentPerfomanceServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/student_perfomance_service_go.StudentPerfomanceService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentPerfomanceServiceServer).Update(ctx, req.(*UpdateStudentPerfomance))
	}
	return interceptor(ctx, in, info, handler)
}

func _StudentPerfomanceService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StudentPerfomancePrimaryKey)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StudentPerfomanceServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/student_perfomance_service_go.StudentPerfomanceService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StudentPerfomanceServiceServer).Delete(ctx, req.(*StudentPerfomancePrimaryKey))
	}
	return interceptor(ctx, in, info, handler)
}

// StudentPerfomanceService_ServiceDesc is the grpc.ServiceDesc for StudentPerfomanceService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StudentPerfomanceService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "student_perfomance_service_go.StudentPerfomanceService",
	HandlerType: (*StudentPerfomanceServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _StudentPerfomanceService_Create_Handler,
		},
		{
			MethodName: "GetByID",
			Handler:    _StudentPerfomanceService_GetByID_Handler,
		},
		{
			MethodName: "GetList",
			Handler:    _StudentPerfomanceService_GetList_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _StudentPerfomanceService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _StudentPerfomanceService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "student_perfomance.proto",
}
